include("./lazywarehouse.jl")
include("./collisionchecker.jl")
include("./WarehouseGrapher.jl")

# define global constants for organizing the route array
jobcount = 3
vehiclecount = 2

u = jobcount + vehiclecount

# Initialise A* for a given map
x = 16;
y = 16;
g, dist_mat, w_map = path_init("SmallWarehouseMap.csv", x, y);

jobs = [Dict("job_id" => 1,
             "start_node" => 22,
             "end_node" => 26),
        Dict("job_id" => 2,
             "start_node" => 34,
             "end_node" => 40),
        Dict("job_id" => 3,
             "start_node" => 150,
             "end_node" => 101)];

vehicles = [Dict("vehicle_id" => 1,
             "start_node" => 23),
        Dict("vehicle_id" => 2,
             "start_node" => 239)];

routecosts = Array(Int,u,u)
# generated by pathcost module

routedefinitions = Array(Any,u,u)
# generated by A*

nodecosts = Array(Int,x*y)
# generated from map
# 1 dim array nodecosts[1] = cost to traverse node1

for (v_index, vehicle) in enumerate(vehicles)

    # Calculate vehicle to vehicle costs
    current_index = 1;
    for (v_other_index, vehicle_other) in enumerate(vehicles)
        route = path_main(vehicle["start_node"], vehicle_other["start_node"], g, dist_mat);
        cost_vehicle_start_to_job_start = calc_path_cost(route, dist_mat);
        routecosts[v_index, current_index] = cost_vehicle_start_to_job_start;
        routedefinitions[v_index, current_index] = route;
        current_index += 1;
    end

    current_index -= 1; # TODO Comment

    for (j_index, job) in enumerate(jobs)
        route = path_main(vehicle["start_node"], job["start_node"], g, dist_mat);

        cost_vehicle_start_to_job_start = calc_path_cost(route, dist_mat);
        routecosts[v_index, current_index + j_index] = cost_vehicle_start_to_job_start;
        routedefinitions[v_index, current_index + j_index] = route;
    end
end

for (j_index, job) in enumerate(jobs)

    # Calculate job to vehicle costs
    current_index = 1;
    for (v_index, vehicle) in enumerate(vehicles)
        route = path_main(job["end_node"], vehicle["start_node"], g, dist_mat);
        cost_vehicle_start_to_job_start = calc_path_cost(route, dist_mat);
        routecosts[j_index + size(vehicles)[1], current_index] = cost_vehicle_start_to_job_start;
        routedefinitions[j_index + size(vehicles)[1], current_index] = route;
        current_index += 1;
    end

    current_index -= 1; # TODO Comment

    for (j_other_index, job_other) in enumerate(jobs)
        route = path_main(job["end_node"], job_other["start_node"], g, dist_mat);

        cost_vehicle_start_to_job_start = calc_path_cost(route, dist_mat);
        routedefinitions[j_index + size(vehicles)[1], current_index + j_other_index] = route;
        routecosts[j_index + size(vehicles)[1], current_index + j_other_index] = cost_vehicle_start_to_job_start;
    end
end

# Flatten route definitions
for i in 1:size(routedefinitions)[1], j in 1:size(routedefinitions)[2]
    flattened = [];
    for (index, edge) in enumerate(routedefinitions[i,j])
        if index == 1
            append!(flattened, edge[1]);
        end
        append!(flattened, edge[2]);
    end
    routedefinitions[i, j] = flattened;
end

routeplan = planroutes(routecosts, jobcount, vehiclecount)
routeplots = plotroutes(routeplan, routedefinitions)

for i in 1:x, j in 1:y
    index = (i - 1) * x + j;
    nodecosts[index] = nodeValue(w_map[i, j]);
end

animatedroutes = animateroutes(routeplots, nodecosts)
resolvedroutes = resolvecollisions(animatedroutes)

println("Resolved routes");
println(resolvedroutes)