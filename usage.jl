include("./lazywarehouse.jl")
include("./collisionchecker.jl")
include("./WarehouseGrapher.jl")

# define global constants for organizing the route array
jobcount = 5
vehiclecount = 2

u = jobcount + vehiclecount

# Initialise A* for a given map
x = 16;
y = 16;
g, dist_mat = path_init("SmallWarehouseMap.csv", x, y);

# TODO I haven't checked whether these indices represent valid locations.
jobs = [Dict("job_id" => 1,
             "start_node" => 3,
             "end_node" => 4),
        Dict("job_id" => 2,
             "start_node" => 100,
             "end_node" => 200),
        Dict("job_id" => 3,
             "start_node" => 150,
             "end_node" => 101)];

routecosts = Array(Int,u,u)
# generated by pathcost module

routedefinitions = Array(Any,u,u)
# generated by A*

# TODO nodecosts; is this just the dist_mat we generated for A*? Wrong dimensions if so.
nodecosts = Array(Int,x*y)
# generated from map
# 1 dim array nodecosts[1] = cost to traverse node1
# TODO Cost to traverse node1 relative to what? Cost is different if cornering/diagonal/straight movement.

for job in jobs
    route = path_main(job["start_node"], job["end_node"], g, dist_mat);
    # routecosts TODO Add the cost to the routecosts array somehow. How do we get the 'cost' of this route?
    # TODO Pass it back through the node cost evaluator and sum?
    # TODO Store the actual route as well
end


routeplan = planroutes(routecosts,jobcount,vehiclecount)
routeplots = plotroutes(vehiclecount,routeplan,routedefinitions)
animatedroutes = animateroutes(routeplots,nodecosts)
resolvedroutes = resolvecollisions(animatedroutes)